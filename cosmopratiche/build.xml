<?xml version="1.0" encoding="UTF-8"?>

<!-- ##################################################### -->
<!-- # build.xml file per compilazione e generazione     # -->
<!-- # del pacchetto per il rilascio dell'applicazione.  # -->
<!-- #                                                   # -->
<!-- # Per una lista completa dei tasks eseguibili usare # -->
<!-- # l'argomento di ant -projecthelp quando si         # -->
<!-- # richiama questo build.xml.                        # -->
<!-- ##################################################### -->

<project basedir="." default="default" name="cosmopratiche" xmlns:ivy="antlib:fr.jayasoft.ivy.ant">

	<description>Build file per il progetto: [cosmopratiche]</description>

	<!-- -->
	<echo message="Loading build properties..." />
	<property file="buildfiles/build.properties" />
	<property file="buildfiles/build.locale.properties" />
	<property file="buildfiles/${target}.properties" />
	<property file="buildfiles/common.properties" />

	<!-- -->
	<path id="library.ref">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
		<fileset dir="${lib_ext}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
		<fileset dir="${docs}/test">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: init                                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="init" description="Inizializza lo script Ant.">
		<tstamp />
		<condition property="target" value="local">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>
		<mkdir dir="${build}/sources" />
		<mkdir dir="${build}/classes" />
		<mkdir dir="${build}/classes/properties-cache" />
		<mkdir dir="${build}/test-classes" />
		<mkdir dir="${build}/generated-sources" />
		<mkdir dir="${temp}/${target}/${earLib}" />
		<mkdir dir="${build}/archives/${target}" />
		<mkdir dir="${dist}/${target}" />
		<mkdir dir="${build}/javadoc" />
		<mkdir dir="${build}/jsp" />
		<mkdir dir="${build}/cache" />

		<var name="classpathRefid" value="library.ref" />

	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: default                                           # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="default" description="Eseguire il build per l'environment specificato a linea di comando con -Dtarget=${target} o per tutti gli environment (se non specificato).">

		<condition property="first-call" value="distribution">
			<not>
				<equals arg1="${target}" arg2="$${target}" />
			</not>
		</condition>

		<condition property="first-call" value="all-targets">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>

		<echo message="server: ${server}" />
		<echo message="target: ${target}" />
		<echo message="first-call: ${first-call}" />

		<antcall target="clean-all" />
		<antcall target="${first-call}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: all-targets                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="all-targets" description="Esegue il build per le varie distribuzioni in sequenza.">
		<!--PROTECTED REGION ID(R-1748880042) ENABLED START-->
		<!-- Inserire le varie distribuzioni di cui si intende eseguire il build. -->
		<antcall target="distribution" />
		<!--PROTECTED REGION END-->
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: distribution                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="distribution" depends="package-all" description="Costruisce il tar per la distribuzione.">
		<echo message="====== Creating distribution for ${target} ..." />
		<echo message="====== Basedir: ${build}/archives/${target} ..." />
		<!--PROTECTED REGION ID(R-64293809) ENABLED START-->
		<!-- inserire qui eventuali statement antcall aggiuntivi da invocare nel processo di distribuzione del tar -->
		<copy todir="${build}/archives/${target}">
			<fileset file="${conf}/${prodotto}-ds.xml" />
		</copy>
		<!--PROTECTED REGION END-->
		<tar tarfile="${dist}/${target}/${dist-file-name}.tar" basedir="${build}/archives/${target}" includes="*.ear,*.xml">
			<tarfileset dir="buildfiles">
				<include name="readme.txt" />
				<!--PROTECTED REGION ID(R-1413323135) ENABLED START-->
				<!-- inserire qui eventuali statement per includere oggetti extra nel tar -->
				<!--PROTECTED REGION END-->
			</tarfileset>
		</tar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: resolve-dependencies                               # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="resolve-dependencies" description="carica le librerie dal repository remoto">
		<ivy:configure file="${basedir}/buildfiles/ivyconf.xml" />
		<ivy:resolve file="${basedir}/buildfiles/ivy.xml" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: internal target: load-dependencies                 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="load-dependencies" depends="resolve-dependencies" description="Risolve le dipendenze esterne.">
		<ivy:retrieve pattern="${basedir}/lib/[artifact].[type]" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: compile-all                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="compile-all" depends="init,load-ivy,preprocess-sources" description="Compila tutti i sorgenti.">

		<echo message="===> Target: ${target}" />

		<!-- compilazione dei sorgenti -->
		<javac srcdir="${gen}/java" destdir="${build}/classes" source="11" target="11" optimize="on" deprecation="on" compiler="modern" debug="on" debuglevel="lines,vars,source">
			<classpath refid="${classpathRefid}" />

			<compilerarg line='-processorpath "${lib_ext}/mapstruct-processor-1.3.1.Final.jar"' />
			<compilerarg line='-s "${build}/generated-sources"' />
		</javac>

		<javac srcdir="${build}/sources" destdir="${build}/classes" source="11" target="11" optimize="on" deprecation="on" compiler="modern" debug="on" debuglevel="lines,vars,source" classpath="${gen}/java">
			<classpath refid="${classpathRefid}" />

			<compilerarg line='-processorpath "${lib_ext}/mapstruct-processor-1.3.1.Final.jar"' />
			<compilerarg line='-s "${build}/generated-sources"' />
		</javac>

		<!-- copia dei sorgenti -->
		<copy todir="${build}/classes">
			<fileset dir="${src}/java" excludes="**/*.java*,**/*.jbx*" />
		</copy>
	</target>

	<target name="compile-test" depends="init,load-ivy,preprocess-sources" description="Compila tutti i sorgenti di test.">
		<delete dir="${build}/test-classes" />
		<mkdir dir="${build}/test-classes" />

		<echo message="===> TEST Target: ${target}" />

		<!-- compilazione dei sorgenti -->
		<javac srcdir="${testsrc}/java" destdir="${build}/test-classes" source="11" target="11" optimize="on" deprecation="on" compiler="modern" debug="on" debuglevel="lines,vars,source">
			<classpath refid="${classpathRefid}" />
			<classpath>
				<pathelement location="${build}/classes" />
			</classpath>
		</javac>
	</target>

	<target name="preprocess-sources">
		<copy todir="${build}/sources">
			<fileset dir="${src}/java" includes="**/*.java" />
		</copy>

		<condition property="target.preprocess.sources.injectiontoken" value="@Resource" else="// @Resource">
			<equals arg1="${infinispan.jndi.enable}" arg2="true" />
		</condition>

		<replace file="${build}/sources/${package.prefix.slash}/integration/infinispan/connector/InfinispanResourceProvider.java" token="@Resource" value="${target.preprocess.sources.injectiontoken}" />

		<condition property="target.preprocess.sources.injectionname" value="${infinispan.jndi.name}" else="--- disabled ---">
			<equals arg1="${infinispan.jndi.enable}" arg2="true" />
		</condition>

		<replace file="${build}/sources/${package.prefix.slash}/integration/infinispan/connector/InfinispanResourceProvider.java" token="@@@infinispan.jndi.name@@@" value="${target.preprocess.sources.injectionname}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-recreate                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-recreate" description="Ricrea l&apos;environment di configurazione per il target corrente (per applicare le sostituzionidelle variabili).">
		<mkdir dir="build/temp/conf" />
		<copy todir="build/temp/conf" overwrite="true">
			<fileset dir="${conf}" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-config                                # -->
	<!-- #         Gestire qui i  replace delle variabile d'ambiente # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-config" description="Predispone le configurazioni dipendenti dall&apos;ambiente.">
		<replace dir="${temp}/conf/web/be/rest/WEB-INF" token="@@hibernate.default.schema@@" value="${hibernate.default.schema}" />
		<replace dir="${temp}/conf/web/be/rest/WEB-INF" token="@@hibernate.show.sql@@" value="${hibernate.show.sql}" />
		<replace dir="${temp}/conf/web/be/rest/WEB-INF" token="@@hibernate.generate.statistics@@" value="${hibernate.generate.statistics}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all" description="Esegue il packaging di ogni componente del prodotto">
		<antcall target="package-ear" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-ear                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-ear" depends="environment-recreate, environment-config, compile-all, package-commons-jar, package-client-jar,
                     package-all-ws-wars" description="costruisce l&apos;ear">

		<!-- librerie infrastrutturali o client di servizi fruiti -->
		
		<copy todir="${temp}/${target}/${earLib}">
			<fileset dir="${lib}" includes="${ear-libs-filter} ${ear-custom-libs-filter}" />
		</copy>

		<copy todir="${temp}/${target}/${earLib}">
			<fileset dir="${lib_ext}" includes="${ear-libs-filter} ${ear-custom-libs-filter}" />
			<fileset dir="${build}/archives/${target}" includes="*common.jar" />
		</copy>

		<ear appxml="${temp}/conf/ear/application.xml" destfile="${build}/archives/${target}/${ear-file-name}.ear">
			<fileset dir="${build}/archives/${target}" includes="*.jar,*.war" excludes="*client*.jar,*common.jar" />
			<fileset dir="${temp}/${target}">
				<include name="**/*" />
			</fileset>
			<metainf dir="${temp}/conf/ear/" includes="jboss-deployment-structure.xml" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
				<attribute name="Appl-Version" value="${version}" />
			</manifest>
		</ear>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all-ws-wars                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all-ws-wars" description="Costruisce i war di tutti i web services">
		<!-- richiamo costruzione war backend REST  -->
		<antcall target="_package-ws-war">
			<param name="component.name" value="${componente}" />
			<param name="service.name" value="be" />
			<param name="binding.code" value="rest" />
			<param name="service.type" value="appl" />
		</antcall>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: _package-ws-war                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_package-ws-war" description="Costruisce il war per un singolo web service">
		<!-- prende in input i parametri: component.name, service.name, binding.code, service.type, service.ver (deve essere a 2 cifre!!!) -->
		<copy file="buildfiles/${target}.properties" tofile="${build}/classes/config.properties" overwrite="true" />

		<copy todir="${build}/classes/properties-cache">
			<fileset dir="buildfiles" includes="*.properties" />
		</copy>

		<copy todir="${temp}/${target}/warLib">
			<fileset dir="${lib}">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</fileset>
		</copy>

		<replace dir="${build}/classes/properties-cache" token="@@@TARGET@@@" value="${target}" />

		<war destfile="${build}/archives/${target}/${service.type}-${service.name}-${binding.code}.war" webxml="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/web.xml" roundup="false">
			<metainf dir="${temp}/conf/web/${service.name}/${binding.code}/META-INF/">
				<include name="*.xml" />
			</metainf>
			<webinf dir="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/">
				<include name="*.xml" />
				<include name="*.properties" />
				<include name="/classes/*.properties" />
			</webinf>
			<classes dir="${build}/classes">
				<!-- <include name="it/csi/*/${componente}/business/${service.name}/**"/> -->
				<include name="it/csi/*/${componente}/**" />
			</classes>


			<classes dir="${temp}/conf/web/${service.name}/${binding.code}/WEB-INF/classes">
				<include name="*.xml" />
			</classes>

			<classes dir="${src}/resources">
			</classes>

			<classes dir="${build}/classes">
				<include name="config.properties" />
				<include name="properties-cache/*.properties" />
			</classes>


			<lib dir="${temp}/${target}/warLib" includes="*" excludes="${war-exclude-libs-filter}, ${war-exclude-custom-libs-filter}" />

			<lib dir="${lib_ext}" includes="*" />

			<!-- se sono presenti risorse web statiche vengono inserite nel pacchetto
					     es. distribuizone webpack gia' buildata della parte client di una 
					     Single Page Application -->
			<!--<fileset dir="${src}/web/${service.name}/${binding.code}" includes="**"></fileset>-->

		</war>
		<delete dir="${temp}/${target}/warLib" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-commons-jar                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-commons-jar" description="Genera il jar per le classi comuni.">
		<jar destfile="${build}/archives/${target}/${componente}-common.jar" basedir="${build}/classes" includes="it/csi/${prodotto}/${componente}/business/**,
		               it/csi/${prodotto}/${componente}/integration/**,
		               it/csi/${prodotto}/${componente}/util/**">

			<exclude name="it/csi/${prodotto}/${componente}/business/rest/**" />
			<exclude name="it/csi/${prodotto}/${componente}/integration/be/**" />
		</jar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-client-jar                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-client-jar" description="Genera il jar per i client">
		<jar destfile="${build}/archives/${target}/${client.name}.jar" basedir="${build}/classes" includes="it/csi/${prodotto}/${componente}/client/**,
				it/csi/${prodotto}/${componente}/dto/rest/**" excludes="it/csi/${prodotto}/${componente}/business/rest/impl/**">
		</jar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-all                                        # -->
	<!-- ############################################################# -->
	<!-- nota: non cancella la directory "dist" appositamente: v. STDMDD-495.
	per ripulire anche la "dist" richiamare esplicitamente il target "clean-dist" -->
	<!-- -->
	<target name="clean-all" description="Rimuove tutte le cartelle temporanee." depends="clean-archives, clean-cache, clean-classes, clean-javadoc, clean-jsp, clean-temp" />

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-cache                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-cache" description="Rimuove la cartella di cache di Ivy e la lib.">
		<!--	<delete dir="${build}/cache" failonerror="no" />
		<delete dir="${lib}" failonerror="no" /> -->
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-temp                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-temp" description="Rimuove la cartella dei files temporanei di build.">
		<delete dir="${temp}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-archives                                  # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-archives" description="Rimuove la cartella degli archivi (war, ear, ...).">
		<delete dir="${build}/archives" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-dist                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-dist" description="Rimuove la cartella delle distribuzioni.">
		<delete dir="${dist}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-classes                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-classes" description="Rimuove la cartella dei sorgenti compilati.">
		<delete dir="${build}/classes" />
		<delete dir="${build}/generated-sources" />
		<delete dir="${build}/sources" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-javadoc                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-javadoc" description="Rimuove la cartella temporanea dei javadoc.">
		<delete dir="${build}/javadoc" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-jsp                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-jsp" description="Rimuove la cartella temporanea delle jsp compilate.">
		<delete dir="${build}/jsp" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: _clean-web-inf                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_clean-web-inf" description="Rimuove il contenuto di lib e classes della
	                     web application (per run locali).">
		<delete dir="${srcweb}/WEB-INF/classes" />
		<delete dir="${srcweb}/WEB-INF/lib" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about                                             # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about" description="Visualizza l'elenco dei target pubblici dello script.">
		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about" srcfile="buildfiles/about.txt" />
		<echo message="${about}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about-custom                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about-custom" description="Visualizza l'elenco di tutti i target,
	                     pubblici e privati
	                     (equivalente a 'ant -projecthelp')">

		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about-custom" srcfile="buildfiles/about-custom.txt" />
		<echo message="${about-custom}" />
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
		</java>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: show-vars                                         # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="show-vars" depends="init" description="Visualizza tutte le variabili impostate nei file di properties e/o da linea di comando">
		<echo message="*****************************************" />
		<echo message="********  ${componente} environment  *******" />
		<echo message="*****************************************" />
		<echoproperties />
		<echo />
		<echo />
		<echo message="*****************************************" />
		<echo message="********    java properties      ********" />
		<echo message="*****************************************" />
		<echoproperties prefix="java." />
	</target>


	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<!--PROTECTED REGION ID(R1519293945) ENABLED START-->
	<path id="axis1.classpath">
		<fileset dir="${axis1.home}/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-lib                                    		 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-lib">
		<echo message="clean-lib" />
		<delete failonerror="false">
			<dirset dir="lib" includes="*" />
			<fileset dir="lib" includes="*" />
		</delete>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: internal target: load-dependencies                 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="load-dependencies-true" depends="resolve-dependencies" description="Risolve le dipendenze esterne.">
		<echo message="load-dependencies-true" />
		<ivy:retrieve pattern="${lib}/[conf]/[artifact].[ext]" conf="*" />
	</target>

	<target name="load-dependencies-false" description="Risolve le dipendenze esterne.">
		<echo message="Skipping ivy dependencies resolution." />
	</target>

	<target name="load-ivy">
		<condition property="target.ivy.task" value="load-dependencies-false" else="load-dependencies">
			<equals arg1="${target.enable.ivy}" arg2="false" />
		</condition>
		<echo message="target.enable.ivy: ${target.enable.ivy}" />
		<antcall target="${target.ivy.task}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: copy-jboss                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="__copyOnUploadLocal" description="Eseguire la copia sulla cartella locale di jboss">

		<echo>COPIA PER IL DEPLOY SU JBOSS LOCALE</echo>
		<copy todir="${local.jboss.path}">
			<fileset dir="${build}/archives/${target}" includes="${componente}.ear" />
		</copy>
	</target>

	<target name="test" depends="environment-recreate, environment-config, compile-all, compile-test">
		<echo>ESECUZIONE TEST JUNIT</echo>
		<junit printsummary="yes" haltonfailure="yes" showoutput="true" fork="yes">
			<classpath>
				<pathelement location="test/resources" />
				<pathelement location="build/test-classes" />
				<pathelement location="build/classes" />
				<pathelement location="lib" />
			</classpath>
			<classpath refid="${classpathRefid}" />
			<formatter type="plain" usefile="false" />

			<batchtest>
				<fileset dir="build/test-classes">
					<include name="it/csi/test/${prodotto}/${componente}/business/**/*Test*.class" />
					<exclude name="it/csi/test/${prodotto}/${componente}/testbed/**/*.class" />
					<exclude name="**/*$*.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>
</project>
