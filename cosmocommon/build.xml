<?xml version="1.0" encoding="UTF-8"?>

<!-- ##################################################### -->
<!-- # build.xml file per compilazione e generazione     # -->
<!-- # del pacchetto per il rilascio dell'applicazione.  # -->
<!-- #                                                   # -->
<!-- # Per una lista completa dei tasks eseguibili usare # -->
<!-- # l'argomento di ant -projecthelp quando si         # -->
<!-- # richiama questo build.xml.                        # -->
<!-- ##################################################### -->

<project basedir="."
         default="default"
         name="cosmocommon"
         xmlns:ivy="antlib:fr.jayasoft.ivy.ant" >

	<description>Build file per il progetto: [cosmocommon]</description>

	<!-- -->
	<echo message="Loading build properties..." />
	<property file="buildfiles/${target}.properties" />
	<property file="buildfiles/build.properties" />
	<property file="buildfiles/build.locale.properties" />

	<!-- -->
	<path id="library.ref">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
		<fileset dir="${lib_ext}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset> 
		<fileset dir="${docs}/test">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>
	
	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: init                                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="init" description="Inizializza lo script Ant.">
		<tstamp />
		<condition property="target" value="local">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>
		<mkdir dir="${build}/sources" />
		<mkdir dir="${build}/classes" />
		<mkdir dir="${build}/classes/properties-cache" /> 
		<mkdir dir="${build}/test-classes" />
		<mkdir dir="${build}/generated-sources" />
		<mkdir dir="${build}/jar-resources" />
		<mkdir dir="${temp}/${target}/${earLib}" />
		<mkdir dir="${build}/archives/${target}" />
		<mkdir dir="${dist}/${target}" />
		<mkdir dir="${build}/javadoc" />
		<mkdir dir="${build}/jsp" />
		<mkdir dir="${build}/cache" />
		
        <var name="classpathRefid" value="library.ref" />
        
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: default                                           # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="default"
	        description="Eseguire il build per l'environment specificato a linea di comando con -Dtarget=${target} o per tutti gli environment (se non specificato).">

		<condition property="first-call" value="distribution">
			<not>
				<equals arg1="${target}" arg2="$${target}" />
			</not>
		</condition>

		<condition property="first-call" value="all-targets">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>

		<echo message="server: ${server}" />
		<echo message="target: ${target}" />
		<echo message="first-call: ${first-call}" />

		<antcall target="clean-all" />
		<antcall target="${first-call}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: all-targets                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="all-targets" description="Esegue il build per le varie distribuzioni in sequenza.">
		<!--PROTECTED REGION ID(R-1748880042) ENABLED START-->
		<!-- Inserire le varie distribuzioni di cui si intende eseguire il build. -->
		<antcall target="distribution" />
		<!--PROTECTED REGION END-->
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: distribution                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="distribution" depends="package-all" description="Costruisce il tar per la distribuzione." >
		<echo message="====== Creating distribution ..."/>
		<echo message="====== Basedir: ${build}/archives/${target} ..."/>
		<!--PROTECTED REGION ID(R-64293809) ENABLED START-->
		<!-- inserire qui eventuali statement antcall aggiuntivi da invocare nel processo di distribuzione del tar -->
		<!--PROTECTED REGION END-->
		<tar tarfile="${dist}/${target}/${dist-file-name}.tar" basedir="${build}/archives/${target}" includes="*.ear,*.xml">
			<tarfileset dir="buildfiles">
				<include name="readme.txt"/>
				<!--PROTECTED REGION ID(R-1413323135) ENABLED START-->
				<!-- inserire qui eventuali statement per includere oggetti extra nel tar -->
				<!--PROTECTED REGION END-->
			</tarfileset>
		</tar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: resolve-dependencies                               # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="resolve-dependencies" description="carica le librerie dal repository remoto">
		<ivy:configure file="${basedir}/buildfiles/ivyconf.xml" />
		<ivy:resolve file="${basedir}/buildfiles/ivy.xml" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: internal target: load-dependencies                 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="load-dependencies" depends="resolve-dependencies" description="Risolve le dipendenze esterne.">
		<ivy:retrieve pattern="${basedir}/lib/[artifact].[type]" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: compile-all                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="compile-all" depends="init,load-ivy,preprocess-sources" description="Compila tutti i sorgenti.">

		<!-- compilazione dei sorgenti -->
		<javac srcdir="${build}/sources" destdir="${build}/classes"
				source="11" target="11"
		       optimize="on" deprecation="on" compiler="modern"
		       debug="on" debuglevel="lines,vars,source"
		       	classpath="${gen}/java">
            <classpath refid="${classpathRefid}" />
			
			<compilerarg line='-processorpath "${lib_ext}/mapstruct-processor-1.3.1.Final.jar"'/>
			<compilerarg line='-s "${build}/generated-sources"'/>
		</javac>

		<!-- copia dei sorgenti -->
		<copy todir="${build}/classes">
			<fileset dir="${src}/java" excludes="**/*.java*,**/*.jbx*" />
		</copy>
	</target>
 
	<target name="compile-test" depends="init,load-ivy,preprocess-sources" description="Compila tutti i sorgenti di test.">
		<delete dir="${build}/test-classes" />
		<mkdir dir="${build}/test-classes" />
			
		<echo message="===> TEST Target: ${target}" />

		<!-- compilazione dei sorgenti -->
		<javac srcdir="${testsrc}/java" destdir="${build}/test-classes"
			source="11" target="11"
			optimize="on" deprecation="on" compiler="modern" debug="on" debuglevel="lines,vars,source">
            <classpath refid="${classpathRefid}" />
            <classpath>
				<pathelement location="${build}/classes" />
			</classpath>
		</javac>
	</target>

	<target name="preprocess-sources">
		<copy todir="${build}/sources">
			<fileset dir="${src}/java" includes="**/*.java" />
		</copy>
		<copy todir="${build}/jar-resources/cosmocommon/test-resources">
			<fileset dir="${basedir}/test/resources" includes="**/*.sql" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-recreate                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-recreate"
	        description="Ricrea l&apos;environment di configurazione per il target corrente (per applicare le sostituzionidelle variabili).">
		<mkdir dir="build/temp/conf" />
		<!--
		<copy todir="build/temp/conf" overwrite="true">
			<fileset dir="${conf}" />
		</copy>
		-->
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-config                                # -->
	<!-- #         Gestire qui i  replace delle variabile d'ambiente # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-config" description="Predispone le configurazioni dipendenti dall&apos;ambiente." >

		<!-- Gestione replace delle variabile d'ambiente create dal generatore -->

		<!--PROTECTED REGION ID(R816510908) ENABLED START-->
		<!-- gestire qui i  replace delle proprie variabili d'ambiente -->
		<!--PROTECTED REGION END-->
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all" description="Esegue il packaging di ogni componente del prodotto">
		<antcall target="package-jar" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-jar                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-jar" depends="compile-all" description="Genera il jar per le classi comuni.">
		<jar destfile="${build}/archives/${target}/cosmo-common.jar">
			<fileset dir="${build}/classes" includes="it/csi/cosmo/common/**" />
		    <fileset dir="${build}/jar-resources"/>
		</jar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-all                                        # -->
	<!-- ############################################################# -->
	<!-- nota: non cancella la directory "dist" appositamente: v. STDMDD-495.
	per ripulire anche la "dist" richiamare esplicitamente il target "clean-dist" -->
	<!-- -->
	<target name="clean-all" description="Rimuove tutte le cartelle temporanee."
	        depends="clean-archives, clean-cache, clean-classes, clean-javadoc, clean-jsp, clean-temp" />

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-cache                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-cache"
	        description="Rimuove la cartella di cache di Ivy e la lib.">
		<!--	<delete dir="${build}/cache" failonerror="no" />
		<delete dir="${lib}" failonerror="no" /> -->
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-temp                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-temp"
	        description="Rimuove la cartella dei files temporanei di build.">
		<delete dir="${temp}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-archives                                  # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-archives"
	        description="Rimuove la cartella degli archivi (war, ear, ...).">
		<delete dir="${build}/archives" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-dist                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-dist"
	        description="Rimuove la cartella delle distribuzioni.">
		<delete dir="${dist}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-classes                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-classes"
	        description="Rimuove la cartella dei sorgenti compilati.">
		<delete dir="${build}/classes" />
		<delete dir="${build}/generated-sources" />
		<delete dir="${build}/sources" />
		<delete dir="${build}/jar-resources" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-javadoc                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-javadoc"
	        description="Rimuove la cartella temporanea dei javadoc.">
		<delete dir="${build}/javadoc" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-jsp                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-jsp"
	        description="Rimuove la cartella temporanea delle jsp compilate.">
		<delete dir="${build}/jsp" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: _clean-web-inf                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_clean-web-inf"
	        description="Rimuove il contenuto di lib e classes della
	                     web application (per run locali).">
		<delete dir="${srcweb}/WEB-INF/classes" />
		<delete dir="${srcweb}/WEB-INF/lib" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about                                             # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about" description="Visualizza l'elenco dei target pubblici dello script.">
		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about" srcfile="buildfiles/about.txt" />
		<echo message="${about}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about-custom                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about-custom"
	        description="Visualizza l'elenco di tutti i target,
	                     pubblici e privati
	                     (equivalente a 'ant -projecthelp')" >

		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about-custom" srcfile="buildfiles/about-custom.txt" />
		<echo message="${about-custom}" />
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
		</java>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: show-vars                                         # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="show-vars" depends="init"
	        description="Visualizza tutte le variabili impostate nei file di properties e/o da linea di comando">
		<echo message="*****************************************" />
		<echo message="********  ${componente} environment  *******" />
		<echo message="*****************************************" />
		<echoproperties />
		<echo />
		<echo />
		<echo message="*****************************************" />
		<echo message="********    java properties      ********" />
		<echo message="*****************************************" />
		<echoproperties prefix="java."/>
	</target>


	<taskdef resource="net/sf/antcontrib/antlib.xml"/>

	<!--PROTECTED REGION ID(R1519293945) ENABLED START-->
	<path id="axis1.classpath">
		<fileset dir="${axis1.home}/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-lib                                    		 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-lib">
        <echo message="clean-lib" />
        <delete failonerror="false">
            <dirset dir="lib" includes="*" />
            <fileset dir="lib" includes="*" />
        </delete>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: internal target: load-dependencies                 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="load-dependencies-true" depends="resolve-dependencies" description="Risolve le dipendenze esterne.">
        <echo message="load-dependencies-true" />
		<ivy:retrieve pattern="${lib}/[conf]/[artifact].[ext]" conf="*"/>
	</target>

    <target name="load-dependencies-false" description="Risolve le dipendenze esterne.">
    	<echo message="Skipping ivy dependencies resolution." />
	</target>

	<target name="load-ivy">
        <condition property="target.ivy.task" value="load-dependencies-false" else="load-dependencies">
		  <equals arg1="${target.enable.ivy}" arg2="false" />
		</condition>
		<echo message="target.enable.ivy: ${target.enable.ivy}" />
		<antcall target="${target.ivy.task}" />
	</target>
 
	<target name="test" depends="environment-recreate, environment-config, compile-all, compile-test">
		<echo>ESECUZIONE TEST JUNIT</echo>
		<junit printsummary="yes" haltonfailure="yes" showoutput="true" fork="yes">
			<classpath>
				<pathelement location="test/resources" />
				<pathelement location="build/test-classes" />
				<pathelement location="build/classes" />
				<pathelement location="lib" />
			</classpath>
            <classpath refid="${classpathRefid}" />
			
			<formatter type="plain" usefile="false" />

			<batchtest>
				<fileset dir="build/test-classes">
					<include name="it/csi/test/${prodotto}/${componente}/business/**/*Test.class" />
					<exclude name="it/csi/test/${prodotto}/${componente}/testbed/**/*.class" />
					<exclude name="**/*$*.class" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
</project>
